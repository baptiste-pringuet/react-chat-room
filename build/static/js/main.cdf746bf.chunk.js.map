{"version":3,"sources":["serviceWorker.js","components/Message/Message.js","components/Form/Form.js","components/App/App.js","config.js","components/page2/page2.js","index.js","images/logo.svg"],"names":["Boolean","window","location","hostname","match","Message","react_default","a","createElement","className","this","props","message","userName","imageUrl","src","Component","Form","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","list","messageRef","firebase","database","ref","child","listenMessages","fileInput","React","createRef","imgCanvas","nextProps","user","setState","displayName","event","target","value","newItem","push","_this2","console","log","current","files","name","file","img","Image","URL","createObjectURL","onload","canvas","getContext","drawImage","width","height","toBlob","blob","storage","put","then","snapshot","getDownloadURL","downloadURL","key","handleSend","_this3","limitToLast","on","values","val","map","item","index","Message_Message_Message","type","onChange","handleImage","bind","placeholder","handleChange","onKeyPress","handleKeyPress","onClick","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","App","auth","onAuthStateChanged","provider","GoogleAuthProvider","signInWithPopup","signOut","logo","alt","handleLogOut","handleSignIn","Form_Form_Form","Page","Header","Link","to","concat","process","Main","Switch","Route","exact","path","component","ReactDOM","render","BrowserRouter","basename","src_Header","src_Main","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.cdf746bf.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {Component} from 'react';\r\nimport './Message.css';\r\nexport default class Message extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"message\">\r\n                <span className=\"message__author\">\r\n                    {this.props.message.userName}:\r\n                </span>\r\n                {this.props.message.message}\r\n                {this.props.message.imageUrl ? <img src={this.props.message.imageUrl} /> : ''}\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './Form.css';\r\nimport Message from '../Message/Message';\r\nimport firebase from 'firebase';\r\n\r\n\r\n\r\nexport default class Form extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            userName: 'machin',\r\n            message: '',\r\n            list: [],\r\n            imageUrl: '',\r\n        };\r\n        this.messageRef = firebase.database().ref().child('messages');\r\n        this.listenMessages();\r\n\r\n        // Create the ref\r\n        this.fileInput = React.createRef()\r\n        this.imgCanvas = React.createRef()\r\n\r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n        if(nextProps.user) {\r\n            this.setState({'userName': nextProps.user.displayName});\r\n        }\r\n    }\r\n    handleChange(event) {\r\n        this.setState({message: event.target.value});\r\n    }\r\n    handleSend() {\r\n        if (this.state.message) {\r\n            var newItem = {\r\n                userName: this.state.userName,\r\n                message: this.state.message,\r\n                imageUrl: this.state.imageUrl,\r\n            }\r\n            this.messageRef.push(newItem);\r\n            this.setState({ message: '' });\r\n        }\r\n    }\r\n\r\n\r\n    handleImage() {\r\n\r\n        console.log(\"pas là\", this.fileInput.current.files[0].name)\r\n        console.log(\"pas là\", this.fileInput)\r\n\r\n        if (this.fileInput.current.files[0]) {\r\n            const file = this.fileInput.current.files[0];\r\n            //const reader = new FileReader();\r\n            // TODO : check si c'est une image\r\n            let img = new Image;\r\n            img.src = URL.createObjectURL(file);\r\n            console.log('img.src == ', img.src)\r\n            console.log('refcanvas == ', this.imgCanvas)\r\n            img.onload = () => {\r\n                console.log('img onooaded')\r\n                let canvas = this.imgCanvas\r\n                let ctx = this.imgCanvas.current.getContext('2d');\r\n                ctx.drawImage(img, 0, 0, img.width, img.height, 0, 0, 200, 100)\r\n                console.log('pouf', canvas)\r\n                canvas.current.toBlob(blob => {\r\n\r\n                    // inject into storage then send msg\r\n                    firebase.storage().ref('images/').child(file.name)\r\n                        .put(blob)\r\n                        .then(snapshot => {\r\n                            snapshot.ref.getDownloadURL()\r\n                                .then(downloadURL => {\r\n                                    this.state.imageUrl = downloadURL;\r\n                                });\r\n                        })\r\n\r\n                }, 'image/webp', 0.8)\r\n\r\n            };\r\n        }\r\n    }\r\n\r\n    handleKeyPress(event) {\r\n        if (event.key !== 'Enter') return;\r\n        this.handleSend();\r\n    }\r\n    listenMessages() {\r\n        this.messageRef\r\n            .limitToLast(10)\r\n            .on('value', message => {\r\n                this.setState({\r\n                    list: Object.values(message.val()),\r\n                });\r\n            });\r\n    }\r\n    render() {\r\n        return (\r\n\r\n            <div className=\"form\">\r\n                <div className=\"form__message\">\r\n                    { this.state.list.map((item, index) =>\r\n                        <Message key={index} message={item} />\r\n                    )}\r\n                </div>\r\n                <canvas ref={this.imgCanvas}>\r\n                </canvas>\r\n\r\n                <div className=\"form__row\">\r\n                    <input\r\n                        type=\"file\"\r\n                        ref={this.fileInput}\r\n                        onChange={this.handleImage.bind(this)}\r\n                    >\r\n                    </input>\r\n                    <input\r\n                        className=\"form__input\"\r\n                        type=\"text\"\r\n                        placeholder=\"Type message\"\r\n                        value={this.state.message}\r\n                        onChange={this.handleChange.bind(this)}\r\n                        onKeyPress={this.handleKeyPress.bind(this)}\r\n                    />\r\n                    <button\r\n                        className=\"form__button\"\r\n                        onClick={this.handleSend.bind(this)}\r\n                    >\r\n                        send\r\n                    </button>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\nimport logo from '../../images/logo.svg';\nimport './App.css';\nimport Form from '../Form/Form.js';\nimport firebase from 'firebase';\nimport firebaseConfig from '../../config';\nfirebase.initializeApp(firebaseConfig);\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: null,\n    }\n  }\n  componentDidMount() {\n    firebase.auth().onAuthStateChanged(user => {\n      this.setState({ user });\n    });\n  }\n  handleSignIn() {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    firebase.auth().signInWithPopup(provider);\n  }\n  handleLogOut() {\n    firebase.auth().signOut();\n  }\n  render() {\n    return (\n        <div className=\"app\">\n          <div className=\"app__header\">\n            <img src={logo} className=\"app__logo\" alt=\"logo\" />\n            <h2>\n              CHATROOM DE L'AMOUR\n            </h2>\n            { !this.state.user ? (\n                <button\n                    className=\"app__button\"\n                    onClick={this.handleSignIn.bind(this)}\n                >\n                  Sign in\n                </button>\n            ) : (\n                <button\n                    className=\"app__button\"\n                    onClick={this.handleLogOut.bind(this)}\n                >\n                  Logout\n                </button>\n            )}\n          </div>\n          <div className=\"app__list\">\n\n            { !this.state.user ? (\n                <p>disonect</p>\n            ) : (\n                <Form user={this.state.user} />\n            )}\n\n          </div>\n        </div>\n    );\n  }\n}\nexport default App;","export default {\r\n    apiKey: \"AIzaSyALICxrbBP-GYzzLzIkt8_MXikoHkuUvDs\",\r\n    authDomain: \"chat-room-3bdaa.firebaseapp.com\",\r\n    databaseURL: \"https://chat-room-3bdaa.firebaseio.com\",\r\n    projectId: \"chat-room-3bdaa\",\r\n    storageBucket: \"chat-room-3bdaa.appspot.com\",\r\n    messagingSenderId: \"159061712966\"\r\n};","import React, { Component } from 'react';\r\nimport logo from '../../images/logo.svg';\r\n\r\nclass Page extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"app\">\r\n                <div className=\"app__header\">\r\n                    <img src={logo} className=\"app__logo\" alt=\"logo\" />\r\n                    <h2>\r\n                        PAGE DE L'AMOUR\r\n                    </h2>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Page;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Route, BrowserRouter, Link, Switch} from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport App from './components/App/App';\nimport Page from './components/page2/page2'\n\n\n\n\n\n\n// The Header creates links that can be used to navigate\n// between routes.\nconst Header = () => (\n    <nav className=\"navbar\">\n        <ul className=\"navbar-list clearfix\">\n            <li className=\"navbar-item\"><Link className=\"navbar-link\" to={`${process.env.PUBLIC_URL}/`}>Home</Link></li>\n            <li className=\"navbar-item\"><Link className=\"navbar-link\" to={`${process.env.PUBLIC_URL}/page`}>Page</Link></li>\n        </ul>\n    </nav>\n);\n\n\n\nconst Main = () => (\n    <main className=\"container\">\n        <Switch>\n            <Route exact path={`${process.env.PUBLIC_URL}/`} component={App}/>\n            <Route exact path={`${process.env.PUBLIC_URL}/page`} component={Page}/>\n        </Switch>\n    </main>\n)\n\nconst Nav = () => (\n    <div className=\"\">\n        <Header/>\n        <Main/>\n    </div>\n)\n\nReactDOM.render((\n    <BrowserRouter basename={'/'}>\n        <Nav/>\n    </BrowserRouter>\n), document.getElementById('root'))\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}